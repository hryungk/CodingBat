// Start with two arrays of strings, A and B, each with its elements in alphabetical
// order and without duplicates. Return a new array containing the first N elements 
// from the two arrays. The result array should be in alphabetical order and without 
// duplicates. A and B will both have a length which is N or more. The best "linear" 
// solution makes a single pass over A and B, taking advantage of the fact that they
// are in alphabetical order, copying elements directly to the new array.
public String[] mergeTwo(String[] a, String[] b, int n) 
{
  assert a.length >= n && b.length >= n;
  String[] newArray = new String[n];
  int in = 0; // counter for newArray
  int ia = 0; // counter for array a
  int ib = 0; // counter for array b
  while(in < n)
  {
    int comparison= a[ia].compareTo(b[ib]);
    if (comparison < 0) // a[ia] < b[ib]
    {
      newArray[in] = a[ia];
      in++;
      ia++;
    }
    else if (comparison > 0) // a[ia] > b[ib]
    {
      newArray[in] = b[ib];
      in++;
      ib++;
    }
    else // a[ia] > b[ib]
    {
      newArray[in] = a[ia];
      in++;
      ia++;
      ib++;
    }
  } // end while
  
  return newArray;
}
