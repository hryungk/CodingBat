// Given an array of ints, is it possible to divide the ints into two groups, 
// so that the sums of the two groups are the same. Every int must be in one group
// or the other. Write a recursive helper method that takes whatever arguments you like, 
// and make the initial call to your recursive helper from splitArray(). (No loops needed.)
public boolean splitArray(int[] nums) 
{
  int len = nums.length;
  int sum = 0;
  for (int i = 0; i < len; i++)
    sum += nums[i];
  
  if (sum % 2 == 1)
    return false;
  else
    return groupSum(0, nums, sum/2);
}

public boolean groupSum(int start, int[] nums, int target) 
{  
  int len = nums.length;
  if (start >= len) // base case
    return target == 0;
  else
    return groupSum(start+1, nums, target - nums[start]) || 
           groupSum(start+1, nums, target);
}
